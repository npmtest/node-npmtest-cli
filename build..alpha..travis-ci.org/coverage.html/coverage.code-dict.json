{"/home/travis/build/npmtest/node-npmtest-cli/test.js":"/* istanbul instrument in package npmtest_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cli/lib.npmtest_cli.js":"/* istanbul instrument in package npmtest_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_cli.__dirname +\n                    '/lib.npmtest_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cli/cli/cli.js":"/**\n * Copyright (c) 2010 Chris O'Hara <cohara87@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n //Note: cli includes kof/node-natives and creationix/stack. I couldn't find\n //license information for either - contact me if you want your license added\n\nvar cli = exports,\n    argv, curr_opt, curr_val, full_opt, is_long,\n    short_tags = [], opt_list, parsed = {},\n    usage, argv_parsed, command_list, commands,\n    show_debug;\n\ncli.app = null;\ncli.version = null;\ncli.argv = [];\ncli.argc = 0;\n\ncli.options = {};\ncli.args = [];\ncli.command = null;\n\ncli.width = 70;\ncli.option_width = 25;\n\n/**\n * Bind kof's node-natives (https://github.com/kof/node-natives) to `cli.native`\n *\n * Rather than requiring node natives (e.g. var fs = require('fs')), all\n * native modules can be accessed like `cli.native.fs`\n */\ncli.native = {};\nvar define_native = function (module) {\n    Object.defineProperty(cli.native, module, {\n        enumerable: true,\n        configurable: true,\n        get: function() {\n            delete cli.native[module];\n            return (cli.native[module] = require(module));\n        }\n    });\n};\nvar natives = process.binding('natives');\nfor (var module in natives) {\n    define_native(module);\n}\n\ncli.output = console.log;\ncli.exit = require('exit');\n\ncli.no_color = false;\nif (process.env.NODE_DISABLE_COLORS || process.env.TERM === 'dumb') {\n    cli.no_color = true;\n}\n\n/**\n * Define plugins. Plugins can be enabled and disabled by calling:\n *\n *     `cli.enable(plugin1, [plugin2, ...])`\n *     `cli.disable(plugin1, [plugin2, ...])`\n *\n * Methods are chainable - `cli.enable(plugin).disable(plugin2)`.\n *\n * The 'help' plugin is enabled by default.\n */\nvar enable = {\n    help: true,      //Adds -h, --help\n    version: false,  //Adds -v,--version => gets version by parsing a nearby package.json\n    status: false,   //Adds -k,--no-color & --debug => display plain status messages /display debug messages\n    timeout: false,  //Adds -t,--timeout N => timeout the process after N seconds\n    catchall: false, //Adds -c,--catch => catch and output uncaughtExceptions\n    glob: false      //Adds glob matching => use cli.glob(arg)\n}\ncli.enable = function (/*plugins*/) {\n    Array.prototype.slice.call(arguments).forEach(function (plugin) {\n        switch (plugin) {\n        case 'catchall':\n            process.on('uncaughtException', function (err) {\n                cli.error('Uncaught exception: ' + (err.msg || err));\n            });\n            break;\n        case 'help': case 'version': case 'status':\n        case 'autocomplete': case 'timeout':\n            //Just add switches.\n            break;\n        case 'glob':\n            cli.glob = require('glob');\n            break;\n        default:\n            cli.fatal('Unknown plugin \"' + plugin + '\"');\n            break;\n        }\n        enable[plugin] = true;\n    });\n    return cli;\n}\ncli.disable = function (/*plugins*/) {\n    Array.prototype.slice.call(arguments).forEach(function (plugin) {\n        if (enable[plugin]) {\n            enable[plugin] = false;\n        }\n    });\n    return cli;\n}\n\n/**\n * Sets argv (default is process.argv).\n *\n * @param {Array|String} argv\n * @param {Boolean} keep_arg0 (optional - default is false)\n * @api public\n */\ncli.setArgv = function (arr, keep_arg0) {\n    if (typeof arr == 'string') {\n      arr = arr.split(' ');\n    } else {\n      arr = arr.slice();\n    }\n    cli.app = arr.shift();\n    // Strip off argv[0] if it's a node binary\n    // So this is still broken and will break if you are calling node through a\n    // symlink, unless you are lucky enough to have it as 'node' literal. Latter\n    // is a hack, but resolving abspaths/symlinks is an unportable can of worms.\n    if (!keep_arg0 && (['node', 'node.exe'].indexOf(cli.native.path.basename(cli.app)) !== -1\n            || cli.native.path.basename(process.execPath) === cli.app\n            || process.execPath === cli.app)) {\n        cli.app = arr.shift();\n    }\n    cli.app = cli.native.path.basename(cli.app);\n    argv_parsed = false;\n    cli.args = cli.argv = argv = arr;\n    cli.argc = argv.length;\n    cli.options = {};\n    cli.command = null;\n};\ncli.setArgv(process.argv);\n\n/**\n * Returns the next opt, or false if no opts are found.\n *\n * @return {String} opt\n * @api public\n */\ncli.next = function () {\n    if (!argv_parsed) {\n        cli.args = [];\n        argv_parsed = true;\n    }\n\n    curr_val = null;\n\n    //If we're currently in a group of short opts (e.g. -abc), return the next opt\n    if (short_tags.length) {\n        curr_opt = short_tags.shift();\n        full_opt = '-' + curr_opt;\n        return curr_opt;\n    }\n\n    if (!argv.length) {\n        return false;\n    }\n\n    curr_opt = argv.shift();\n\n    //If an escape sequence is found (- or --), subsequent opts are ignored\n    if (curr_opt === '-' || curr_opt === '--') {\n        while (argv.length) {\n            cli.args.push(argv.shift());\n        }\n        return false;\n    }\n\n    //If the next element in argv isn't an opt, add it to the list of args\n    if (curr_opt[0] !== '-') {\n        cli.args.push(curr_opt);\n        return cli.next();\n    } else {\n        //Check if the opt is short/long\n        is_long = curr_opt[1] === '-';\n        curr_opt = curr_opt.substr(is_long ? 2 : 1);\n    }\n\n    //Accept grouped short opts, e.g. -abc => -a -b -c\n    if (!is_long && curr_opt.length > 1) {\n        short_tags = curr_opt.split('');\n        return cli.next();\n    }\n\n    var eq, len;\n\n    //Check if the long opt is in the form --option=VALUE\n    if (is_long && (eq = curr_opt.indexOf('=')) >= 0) {\n        curr_val = curr_opt.substr(eq + 1);\n        curr_opt = curr_opt.substr(0, eq);\n        len = curr_val.length;\n        //Allow values to be quoted\n        if ((curr_val[0] === '\"' && curr_val[len - 1] === '\"') ||\n            (curr_val[0] === \"'\" && curr_val[len - 1] === \"'\"))\n        {\n            curr_val = curr_val.substr(1, len-2);\n        }\n        if (curr_val.match(/^[0-9]+$/)) {\n            curr_val = parseInt(curr_val, 10);\n        }\n    }\n\n    //Save the opt representation for later\n    full_opt = (is_long ? '--' : '-') + curr_opt;\n\n    return curr_opt;\n};\n\n/**\n * Parses command line opts.\n *\n * `opts` must be an object with opts defined like:\n *        long_tag: [short_tag, description, value_type, default_value];\n *\n * `commands` is an optional array or object for apps that are of the form\n *      my_app [OPTIONS] <command> [ARGS]\n *  The command list is output with usage information + there is bundled\n *  support for auto-completion, etc.\n *\n * See README.md for more information.\n *\n * @param {Object} opts\n * @param {Object} commands (optional)\n * @return {Object} opts (parsed)\n * @api public\n */\ncli.parse = function (opts, command_def) {\n    var default_val, i, o, parsed = cli.options, seen,\n        catch_all = !opts;\n    opt_list = opts || {};\n    commands = command_def;\n    command_list = commands || [];\n    if (commands && !Array.isArray(commands)) {\n        command_list = Object.keys(commands);\n    }\n    while ((o = cli.next())) {\n        seen = false;\n        for (var opt in opt_list) {\n            if (!(opt_list[opt] instanceof Array)) {\n                continue;\n            }\n            if (!opt_list[opt][0]) {\n                opt_list[opt][0] = opt;\n            }\n            if (o === opt || o === opt_list[opt][0]) {\n                seen = true;\n                if (opt_list[opt].length === 2) {\n                    parsed[opt] = true;\n                    break;\n                }\n                default_val = null;\n                if (opt_list[opt].length === 4) {\n                    default_val = opt_list[opt][3];\n                }\n                if (opt_list[opt][2] instanceof Array) {\n                    for (i = 0, l = opt_list[opt][2].length; i < l; i++) {\n                        if (typeof opt_list[opt][2][i] === 'number') {\n                            opt_list[opt][2][i] += '';\n                        }\n                    }\n                    parsed[opt] = cli.getArrayValue(opt_list[opt][2], is_long ? null : default_val);\n                    break;\n                }\n                if (opt_list[opt][2].toLowerCase) {\n                    opt_list[opt][2] = opt_list[opt][2].toLowerCase();\n                }\n                switch (opt_list[opt][2]) {\n                case 'string': case 1: case true:\n                    parsed[opt] = cli.getValue(default_val);\n                    break;\n                case 'int': case 'number': case 'num':\n                case 'time': case 'seconds': case 'secs': case 'minutes': case 'mins':\n                case 'x': case 'n':\n                    parsed[opt] = cli.getInt(default_val);\n                    break;\n                case 'date': case 'datetime': case 'date_time':\n                    parsed[opt] = cli.getDate(default_val);\n                    break;\n                case 'float': case 'decimal':\n                    parsed[opt] = cli.getFloat(default_val);\n                    break;\n                case 'path': case 'file': case 'directory': case 'dir':\n                    parsed[opt] = cli.getPath(default_val, opt_list[opt][2]);\n                    break;\n                case 'email':\n                    parsed[opt] = cli.getEmail(default_val);\n                    break;\n                case 'url': case 'uri': case 'domain': case 'host':\n                    parsed[opt] = cli.getUrl(default_val, opt_list[opt][2]);\n                    break;\n                case 'ip':\n                    parsed[opt] = cli.getIp(default_val);\n                    break;\n                case 'bool': case 'boolean': case 'on':\n                    parsed[opt] = true;\n                    break;\n                case 'false': case 'off': case false: case 0:\n                    parsed[opt] = false;\n                    break;\n                default:\n                     cli.fatal('Unknown opt type \"' + opt_list[opt][2] + '\"');\n                }\n                break;\n            }\n        }\n        if (!seen) {\n            if (enable.help && (o === 'h' || o === 'help')) {\n                cli.getUsage();\n            } else if (enable.version && (o === 'v' || o === 'version')) {\n                if (cli.version == null) {\n                    cli.parsePackageJson();\n                }\n                console.error(cli.app + ' v' + cli.version);\n                cli.exit();\n                break;\n            } else if (enable.catchall && (o === 'c' || o === 'catch')) {\n                continue;\n            } else if (enable.status && (o === 'k' || o === 'no-color')) {\n                cli.no_color = (o === 'k' || o === 'no-color');\n                continue;\n            } else if (enable.status && (o === 'debug')) {\n                show_debug = o === 'debug';\n                continue;\n            } else if (enable.timeout && (o === 't' || o === 'timeout')) {\n                var secs = cli.getInt();\n                setTimeout(function () {\n                    cli.fatal('Process timed out after ' + secs + 's');\n                }, secs * 1000);\n                continue;\n            } else if (catch_all) {\n                parsed[o] = curr_val || true;\n                continue;\n            }\n            cli.fatal('Unknown option ' + full_opt);\n        }\n    }\n    //Fill the remaining options with their default value or null\n    for (var opt in opt_list) {\n        default_val = opt_list[opt].length === 4 ? opt_list[opt][3] : null;\n        if (!(opt_list[opt] instanceof Array)) {\n            parsed[opt] = opt_list[opt];\n            continue;\n        } else if (typeof parsed[opt] === 'undefined') {\n            parsed[opt] = default_val;\n        }\n    }\n    if (command_list.length) {\n        if (cli.args.length === 0) {\n            if (enable.help) {\n                cli.getUsage();\n            } else {\n                cli.fatal('A command is required (' + command_list.join(', ') + ').');\n            }\n            return cli.exit(1);\n        } else {\n            cli.command = cli.autocompleteCommand(cli.args.shift());\n        }\n    }\n    cli.argc = cli.args.length;\n    return parsed;\n};\n\n/**\n * Helper method for matching a command from the command list.\n *\n * @param {String} command\n * @return {String} full_command\n * @api public\n */\ncli.autocompleteCommand = function (command) {\n    var list;\n    if (!(command_list instanceof Array)) {\n        list = Object.keys(command_list);\n    } else {\n        list = command_list;\n    }\n    var i, j = 0, c = command.length, tmp_list;\n    if (list.length === 0 || list.indexOf(command) !== -1) {\n        return command;\n    }\n    for (i = 0; i < c; i++) {\n        tmp_list = [];\n        l = list.length;\n        if (l <= 1) break;\n        for (j = 0; j < l; j++)\n            if (list[j].length >= i && list[j][i] === command[i])\n                tmp_list.push(list[j]);\n        list = tmp_list;\n    }\n    l = list.length;\n    if (l === 1) {\n        return list[0];\n    } else if (l === 0) {\n        cli.fatal('Unknown command \"' + command + '\"' + (enable.help ? '. Please see --help for more information' : ''));\n    } else {\n        list.sort();\n        cli.fatal('The command \"' + command + '\" is ambiguous and could mean \"' + list.join('\", \"') + '\"');\n    }\n};\n\n/**\n * Adds methods to output styled status messages to stderr.\n *\n * Added methods are cli.info(msg), cli.error(msg), cli.ok(msg), and\n * cli.debug(msg).\n *\n * To control status messages, use the 'status' plugin\n *    1) debug() messages are hidden by default. Display them with\n *       the --debug opt.\n *    2) to hide all status messages, use the -s or --silent opt.\n *\n * @api private\n */\ncli.status = function (msg, type) {\n    var pre;\n    switch (type) {\n    case 'info':\n        pre = cli.no_color ? 'INFO:' : '\\x1B[33mINFO\\x1B[0m:';\n        break;\n    case 'debug':\n        pre = cli.no_color ? 'DEBUG:' : '\\x1B[36mDEBUG\\x1B[0m:';\n        break;\n    case 'error':\n    case 'fatal':\n        pre = cli.no_color ? 'ERROR:' : '\\x1B[31mERROR\\x1B[0m:';\n        break;\n    case 'ok':\n        pre = cli.no_color ? 'OK:' : '\\x1B[32mOK\\x1B[0m:';\n        break;\n    }\n    msg = pre + ' ' + msg;\n    if (type === 'fatal') {\n        console.error(msg);\n        return cli.exit(1);\n    }\n    if (enable.status && !show_debug && type === 'debug') {\n        return;\n    }\n    console.error(msg);\n};\n['info','error','ok','debug','fatal'].forEach(function (type) {\n    cli[type] = function (msg) {\n        cli.status(msg, type);\n    };\n});\n\n/**\n * Sets the app name and version.\n *\n * Usage:\n *     setApp('myapp', '0.1.0');\n *     setApp('./package.json'); //Pull name/version from package.json\n *\n * @param {String} name\n * @return cli (for chaining)\n * @api public\n */\ncli.setApp = function (name, version) {\n    if (name.indexOf('package.json') !== -1) {\n        cli.parsePackageJson(name);\n    } else {\n        cli.app = name;\n        cli.version = version;\n    }\n    return cli;\n};\n\n/**\n * Parses the version number from package.json. If no path is specified, cli\n * will attempt to locate a package.json in ./, ../ or ../../\n *\n * @param {String} path (optional)\n * @api public\n */\ncli.parsePackageJson = function (path) {\n    var parse_packagejson = function (path) {\n        var packagejson = JSON.parse(cli.native.fs.readFileSync(path, 'utf8'));\n        cli.version = packagejson.version;\n        cli.app = packagejson.name;\n    };\n    var try_all = function (arr, func, err) {\n        for (var i = 0, l = arr.length; i < l; i++) {\n            try {\n                func(arr[i]);\n                return;\n            } catch (e) {\n                if (i === l-1) {\n                    cli.fatal(err);\n                }\n            }\n        }\n    };\n    try {\n        if (path) {\n            return parse_packagejson(path);\n        }\n        try_all([\n            __dirname + '/package.json',\n            __dirname + '/../package.json',\n            __dirname + '/../../package.json'\n        ], parse_packagejson);\n    } catch (e) {\n        cli.fatal('Could not detect ' + cli.app + ' version');\n    }\n};\n\n/**\n * Sets the usage string - default is `app [OPTIONS] [ARGS]`.\n *\n * @param {String} u\n * @return cli (for chaining)\n * @api public\n */\ncli.setUsage = function (u) {\n    usage = u;\n    return cli;\n};\n\nvar pad = function (str, len) {\n    if (typeof len === 'undefined') {\n        len = str;\n        str = '';\n    }\n    if (str.length < len) {\n        len -= str.length;\n        while (len--) str += ' ';\n    }\n    return str;\n};\n\n/**\n * Automatically build usage information from the opts list. If the help\n * plugin is enabled (default), this info is displayed with -h, --help.\n *\n * @api public\n */\ncli.getUsage = function (code) {\n    var short, desc, optional, line, seen_opts = [],\n        switch_pad = cli.option_width;\n\n    var trunc_desc = function (pref, desc, len) {\n        var pref_len = pref.length,\n            desc_len = cli.width - pref_len,\n            truncated = '';\n        if (desc.length <= desc_len) {\n            return desc;\n        }\n        var desc_words = (desc+'').split(' '), chars = 0, word;\n        while (desc_words.length) {\n            truncated += (word = desc_words.shift()) + ' ';\n            chars += word.length;\n            if (desc_words.length && chars + desc_words[0].length > desc_len) {\n                truncated += '\\n' + pad(pref_len);\n                chars = 0;\n            }\n        }\n        return truncated;\n    };\n\n    usage = usage || cli.app + ' [OPTIONS]' + (command_list.length ? ' <command>' : '') + ' [ARGS]';\n    if (cli.no_color) {\n        console.error('Usage:\\n  ' + usage);\n        console.error('Options: ');\n    } else {\n        console.error('\\x1b[1mUsage\\x1b[0m:\\n  ' + usage);\n        console.error('\\n\\x1b[1mOptions\\x1b[0m: ');\n    }\n    for (var opt in opt_list) {\n\n        if (opt.length === 1) {\n            long = opt_list[opt][0];\n            short = opt;\n        } else {\n            long = opt;\n            short = opt_list[opt][0];\n        }\n\n        //Parse opt_list\n        desc = opt_list[opt][1].trim();\n        type = opt_list[opt].length >= 3 ? opt_list[opt][2] : null;\n        optional = opt_list[opt].length === 4 ? opt_list[opt][3] : null;\n\n        //Build usage line\n        if (short === long) {\n            if (short.length === 1) {\n                line = '  -' + short;\n            } else {\n                line = '      --' + long;\n            }\n        } else if (short) {\n            line = '  -' + short + ', --' + long;\n        } else {\n            line = '      --' + long;\n        }\n        line += ' ';\n\n        if (type) {\n            if (type instanceof Array) {\n                desc += '. VALUE must be either [' + type.join('|') + ']';\n                type = 'VALUE';\n            }\n            if (type === true || type === 1) {\n                type = long.toUpperCase();\n            }\n            type = type.toUpperCase();\n            if (type === 'FLOAT' || type === 'INT') {\n                type = 'NUMBER';\n            }\n            line += optional ? '[' + type + ']' : type;\n        }\n        line = pad(line, switch_pad);\n        line += trunc_desc(line, desc);\n        line += optional ? ' (Default is ' + optional + ')' : '';\n        console.error(line.replace('%s', '%\\0s'));\n\n        seen_opts.push(short);\n        seen_opts.push(long);\n    }\n    if (enable.timeout && seen_opts.indexOf('t') === -1 && seen_opts.indexOf('timeout') === -1) {\n        console.error(pad('  -t, --timeout N', switch_pad) + 'Exit if the process takes longer than N seconds');\n    }\n    if (enable.status) {\n        if (seen_opts.indexOf('k') === -1 && seen_opts.indexOf('no-color') === -1) {\n            console.error(pad('  -k, --no-color', switch_pad) + 'Omit color from output');\n        }\n        if (seen_opts.indexOf('debug') === -1) {\n            console.error(pad('      --debug', switch_pad) + 'Show debug information');\n        }\n    }\n    if (enable.catchall && seen_opts.indexOf('c') === -1 && seen_opts.indexOf('catch') === -1) {\n        console.error(pad('  -c, --catch', switch_pad) + 'Catch unanticipated errors');\n    }\n    if (enable.version && seen_opts.indexOf('v') === -1 && seen_opts.indexOf('version') === -1) {\n        console.error(pad('  -v, --version', switch_pad) + 'Display the current version');\n    }\n    if (enable.help && seen_opts.indexOf('h') === -1 && seen_opts.indexOf('help') === -1) {\n        console.error(pad('  -h, --help', switch_pad) + 'Display help and usage details');\n    }\n    if (command_list.length) {\n        console.error('\\n\\x1b[1mCommands\\x1b[0m: ');\n        if (!Array.isArray(commands)) {\n            for (var c in commands) {\n                line = '  ' + pad(c, switch_pad - 2);\n                line += trunc_desc(line, commands[c]);\n                console.error(line);\n            }\n        } else {\n            command_list.sort();\n            console.error('  ' + trunc_desc('  ', command_list.join(', ')));\n        }\n    }\n    return cli.exit(code);\n};\n\n/**\n * Generates an error message when an opt is incorrectly used.\n *\n * @param {String} expects (e.g. 'a value')\n * @param {String} type (e.g. 'VALUE')\n * @api public\n */\ncli.getOptError = function (expects, type) {\n    var err = full_opt + ' expects ' + expects\n            + '. Use `' + cli.app + ' ' + full_opt + (is_long ? '=' : ' ') + type + '`';\n    return err;\n};\n\n/**\n * Gets the next opt value and validates it with an optional validation\n * function. If validation fails or no value can be obtained, this method\n * will return the default value (if specified) or exit with err_msg.\n *\n * @param {String} default_val\n * @param {Function} validate_func\n * @param {String} err_msg\n * @api public\n */\ncli.getValue = function (default_val, validate_func, err_msg) {\n    err_msg = err_msg || cli.getOptError('a value', 'VALUE');\n\n    var value;\n\n    try {\n        if (curr_val) {\n            if (validate_func) {\n                curr_val = validate_func(curr_val);\n            }\n            return curr_val;\n        }\n\n        //Grouped short opts aren't allowed to have values\n        if (short_tags.length) {\n            throw 'Short tags';\n        }\n\n        //If there's no args left or the next arg is an opt, return the\n        //default value (if specified) - otherwise fail\n        if (!argv.length || (argv[0].length === 1 && argv[0][0] === '-')) {\n            throw 'No value';\n        }\n\n        value = argv.shift();\n\n        if (value.match(/^[0-9]+$/)) {\n            value = parseInt(value, 10);\n        }\n\n        //Run the value through a validation/transformation function if specified\n        if (validate_func) {\n            value = validate_func(value);\n        }\n    } catch (e) {\n\n        //The value didn't pass the validation/transformation. Unshift the value and\n        //return the default value (if specified)\n        if (value) {\n            argv.unshift(value);\n        }\n        return default_val != null ? default_val : cli.fatal(err_msg);\n    }\n    return value;\n};\n\ncli.getInt = function (default_val) {\n    return cli.getValue(default_val, function (value) {\n        if (typeof value === 'number') return value;\n        if (!value.match(/^(?:-?(?:0|[1-9][0-9]*))$/)) {\n            throw 'Invalid int';\n        }\n        return parseInt(value);\n    }, cli.getOptError('a number', 'NUMBER'));\n}\n\ncli.getDate = function (default_val) {\n\n    return cli.getValue(default_val, function (value) {\n        if (cli.toType(value) === 'date') return value;\n        value = new Date(value);\n        if ( ! value.getTime() ) {\n            throw value.toString();\n        }\n\n        return value;\n    }, cli.getOptError('a date', 'DATE'));\n}\n\ncli.getFloat = function (default_val) {\n    return cli.getValue(default_val, function (value) {\n        if (!value.match(/^(?:-?(?:0|[1-9][0-9]*))?(?:\\.[0-9]*)?$/)) {\n            throw 'Invalid float';\n        }\n        return parseFloat(value, 10);\n    }, cli.getOptError('a number', 'NUMBER'));\n}\n\ncli.getUrl = function (default_val, identifier) {\n    identifier = identifier || 'url';\n    return cli.getValue(default_val, function (value) {\n        if (!value.match(/^(?:(?:ht|f)tp(?:s?)\\:\\/\\/|~\\/|\\/)?(?:\\w+:\\w+@)?((?:(?:[-\\w\\d{1-3}]+\\.)+(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|co\\.uk|ac\\.uk|it|fr|tv|museum|asia|local|travel|[a-z]{2})?)|((\\b25[0-5]\\b|\\b[2][0-4][0-9]\\b|\\b[0-1]?[0-9]?[0-9]\\b)(\\.(\\b25[0-5]\\b|\\b[2][0-4][0-9]\\b|\\b[0-1]?[0-9]?[0-9]\\b)){3}))(?::[\\d]{1,5})?(?:(?:(?:\\/(?:[-\\w~!$+|.,=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?(?:(?:\\?(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)(?:&(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)*)*(?:#(?:[-\\w~!$ |\\/.,*:;=]|%[a-f\\d]{2})*)?$/i)) {\n            throw 'Invalid URL';\n        }\n        return value;\n    }, cli.getOptError('a ' + identifier, identifier.toUpperCase()));\n}\n\ncli.getEmail = function (default_val) {\n    return cli.getValue(default_val, function (value) {\n        if (!value.match(/^(?:[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/)) {\n            throw 'Invalid email';\n        }\n        return value;\n    }, cli.getOptError('an email', 'EMAIL'));\n}\n\ncli.getIp = function (default_val) {\n    return cli.getValue(default_val, function (value) {\n        if (!value.match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)) {\n            throw 'Invalid IP';\n        }\n        return value;\n    }, cli.getOptError('an IP', 'IP'));\n}\n\ncli.getPath = function (default_val, identifier) {\n    identifier = identifier || 'path';\n    return cli.getValue(default_val, function (value) {\n        if (value.match(/[?*;{}]/)) {\n            throw 'Invalid path';\n        }\n        return value;\n    }, cli.getOptError('a ' + identifier, identifier.toUpperCase()));\n}\n\ncli.getArrayValue = function (arr, default_val) {\n    return cli.getValue(default_val, function (value) {\n        if (arr.indexOf(value) === -1) {\n            throw 'Unexpected value';\n        }\n        return value;\n    }, cli.getOptError('either [' + arr.join('|') + ']', 'VALUE'));\n}\n\n/**\n * Gets all data from STDIN (with optional encoding) and sends it to callback.\n *\n * @param {String} encoding (optional - default is 'utf8')\n * @param {Function} callback\n * @api public\n */\ncli.withStdin = function (encoding, callback) {\n    if (typeof encoding === 'function') {\n        callback = encoding;\n        encoding = 'utf8';\n    }\n    var stream = process.openStdin(), data = '';\n    stream.setEncoding(encoding);\n    stream.on('data', function (chunk) {\n        data += chunk;\n    });\n    stream.on('end', function () {\n        callback.apply(cli, [data]);\n    });\n};\n\n/**\n * Gets all data from STDIN, splits the data into lines and sends it\n * to callback (callback isn't called until all of STDIN is read. To\n * process each line as it's received, see the method below\n *\n * @param {Function} callback\n * @api public\n */\ncli.withStdinLines = function (callback) {\n    cli.withStdin(function (data) {\n        var sep = data.indexOf('\\r\\n') !== -1 ? '\\r\\n' : '\\n';\n        callback.apply(cli, [data.split(sep), sep]);\n    });\n};\n\n/**\n * Asynchronously reads a file line by line. When a line is received,\n * callback is called with (line, sep) - when EOF is reached, callback\n * receives (null, null, true)\n *\n * @param {String} file (optional - default is 'stdin')\n * @param {String} encoding (optional - default is 'utf8')\n * @param {Function} callback (line, sep, eof)\n * @api public\n */\ncli.withInput = function (file, encoding, callback) {\n    if (typeof encoding === 'function') {\n        callback = encoding;\n        encoding = 'utf8';\n    } else if (typeof file === 'function') {\n        callback = file;\n        encoding = 'utf8';\n        file = 'stdin';\n    }\n    if (file === 'stdin') {\n        file = process.openStdin();\n    } else {\n        try {\n            file = cli.native.fs.createReadStream(file);\n            file.on('error', cli.fatal);\n        } catch (e) {\n            return cli.fatal(e);\n        }\n    }\n    file.setEncoding(encoding);\n    var lines = [], data = '', eof, sep;\n    file.on('data', function (chunk) {\n        if (eof) return;\n        data += chunk;\n        if (!sep) {\n            if (data.indexOf('\\r\\n') !== -1) {\n                sep = '\\r\\n';\n            } else if (data.indexOf('\\n') !== -1) {\n                sep = '\\n';\n            } else {\n                last_line = data;\n                return;\n            }\n        }\n        lines = data.split(sep);\n        data = eof ? null : lines.pop();\n        while (lines.length) {\n            callback.apply(cli, [lines.shift(), sep, false]);\n        }\n    });\n    file.on('end', function () {\n        eof = true;\n        if (data.length) {\n            callback.apply(cli, [data, sep || '', false]);\n        }\n        callback.apply(cli, [null, null, true]);\n    });\n};\n\n/**\n * This function does a much better job at determining the object type than the typeof operator\n * @author Angus Croll  - https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n * @param  {Object} obj A Javascript object you wish to know the type of.\n * @return {string}     A string describing the Object's type if it is indeed a built in JavaScript type.\n */\ncli.toType = function(obj) {\n    var type = ({}).toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n\n    function isInt(n) {\n        return Number(n) === n && n % 1 === 0;\n    }\n\n    function isFloat(n){\n        return n === Number(n) && n % 1 !== 0;\n    }\n\n    if ( type === 'number' ) {\n        if ( isInt(obj) ) {\n            return 'integer';\n        } else if ( isFloat(obj) ) {\n            return 'float';\n        }\n    }\n\n    return type;\n}\n\n/**\n * The main entry method. `callback` receives (args, options)\n *\n * @param {Function} callback\n * @api public\n */\ncli.main = function (callback) {\n    callback.call(cli, cli.args, cli.options);\n}\n\n/**\n * Bind creationix's stack (https://github.com/creationix/stack).\n *\n * Create a simple middleware stack by calling:\n *\n *     cli.createServer(middleware).listen(port);\n *\n * @return {Server} server\n * @api public\n */\ncli.createServer = function(/*layers*/) {\n    var defaultStackErrorHandler = function (req, res, err) {\n        if (err) {\n            console.error(err.stack);\n            res.writeHead(500, {\"Content-Type\": \"text/plain\"});\n            return res.end(err.stack + \"\\n\");\n        }\n        res.writeHead(404, {\"Content-Type\": \"text/plain\"});\n        res.end(\"Not Found\\n\");\n    };\n    var handle, error;\n    handle = error = defaultStackErrorHandler;\n    var layers = Array.prototype.slice.call(arguments);\n\n    //Allow createServer(a,b,c) and createServer([a,b,c])\n    if (layers.length && layers[0] instanceof Array) {\n        layers = layers[0];\n    }\n    layers.reverse().forEach(function (layer) {\n        var child = handle;\n        handle = function (req, res) {\n            try {\n                layer(req, res, function (err) {\n                    if (err) return error(req, res, err);\n                    child(req, res);\n                });\n            } catch (err) {\n                error(req, res, err);\n            }\n        };\n    });\n    return cli.native.http.createServer(handle);\n};\n\n/**\n * A wrapper for child_process.exec().\n *\n * If the child_process exits successfully, `callback` receives an array of\n * stdout lines. The current process exits if the child process has an error\n * and `errback` isn't defined.\n *\n * @param {String} cmd\n * @param {Function} callback (optional)\n * @param {Function} errback (optional)\n * @api public\n */\ncli.exec = function (cmd, callback, errback) {\n    cli.native.child_process.exec(cmd, function (err, stdout, stderr) {\n        err = err || stderr;\n        if (err) {\n            if (errback) {\n                return errback(err, stdout);\n            }\n            return cli.fatal('exec() failed\\n' + err);\n        }\n        if (callback) {\n            callback(stdout.split('\\n'));\n        }\n    });\n};\n\n/**\n * Helper method for outputting a progress bar to the console.\n *\n * @param {Number} progress (0 <= progress <= 1)\n * @api public\n */\nvar last_progress_call, progress_len = 74, min_progress_increase = 5, last_progress_percentage = 0;\ncli.progress = function (progress, decimals, stream) {\n    stream = stream || process.stdout;\n    if (progress < 0 || progress > 1 || isNaN(progress)) return;\n    if (!decimals) decimals = 0;\n    var now = (new Date()).getTime();\n    if (last_progress_call && (now - last_progress_call) < 100 && progress !== 1) {\n        return; //Throttle progress calls\n    }\n    last_progress_call = now;\n\n    var pwr = Math.pow(10, decimals);\n    var percentage_as_num = Math.floor(progress * 100 * pwr) / pwr;\n    if (!stream.isTTY && percentage_as_num < 100 && percentage_as_num - last_progress_percentage < min_progress_increase) {\n        return; //don't over-print if not TTY\n    }\n    last_progress_percentage = percentage_as_num;\n    var percentage = percentage_as_num + '%';\n    for (var i = 0; i < decimals; i++) {\n        percentage += ' ';\n    }\n    if (!stream.isTTY) {\n        if (percentage_as_num < 100) {\n            stream.write(percentage + '...');\n        }\n        else {\n            stream.write(percentage + '\\n');\n            last_progress_percentage = 0;\n        }\n        return;\n    }\n    var bar_length = Math.floor(progress_len * progress),\n        str       = '';\n    if (bar_length == 0 && progress > 0) {\n        bar_length = 1;\n    }\n    for (i = 1; i <= progress_len; i++) {\n        str += i <= bar_length ? '#' : ' ';\n    }\n    stream.clearLine();\n    stream.write('[' + str + '] ' +  percentage);\n    if (progress === 1) {\n        stream.write('\\n');\n    } else {\n        stream.cursorTo(0);\n    }\n};\n\n/**\n * Helper method for outputting a spinner to the console.\n *\n * @param {String|Boolean} prefix (optional)\n * @api public\n */\nvar spinner_interval;\ncli.spinner = function (prefix, end, stream) {\n    stream = stream || process.stdout;\n    if(!stream.isTTY) {\n        stream.write(prefix + '\\n');\n        return;\n    }\n    if (end) {\n        stream.clearLine();\n        stream.cursorTo(0);\n        stream.write(prefix + '\\n');\n        return clearInterval(spinner_interval);\n    }\n    prefix = prefix + ' ' || '';\n    var spinner = ['-','\\\\','|','/'], i = 0, l = spinner.length;\n    spinner_interval = setInterval(function () {\n        stream.clearLine();\n        stream.cursorTo(0);\n        stream.write(prefix + spinner[i++]);\n        if (i == l) i = 0;\n    }, 200);\n};\n"}